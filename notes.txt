backend logic for notes page

get the content info from response and display it in the notes cell
but if i login then i have to make sure that data fetched from mongo for historical data 
then i have to save the response to the mongo db for this purpose
shoukd only store the ocntent ig?
no date should also be stored 
and fetch it i think it aint a problem because its only like 5kb hence managabke

so today's task would be to complete the notes page

so the steps would be:
create an endpoint to store the data in mongo
create an endpoint to fetch the data from mongo
segregate the content from the response
and display it
why seperate function (pinna oru oru vaatiyu generate pantu irupiya)

forgetpassword page 

import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";

const CalendarLayout = () => {
  const [selectedDate, setSelectedDate] = useState(null);
  const [promptExpanded, setPromptExpanded] = useState(false);
  const [summary, setSummary] = useState("");
  const [calendarDays, setCalendarDays] = useState([]);
  const [monthlyContentPlan, setMonthlyContentPlan] = useState(() => {
    const stored = sessionStorage.getItem("monthlyContentPlan");
    return stored ? JSON.parse(stored) : {};
  });
  const [currentMonth, setCurrentMonth] = useState(new Date());
  const navigate = useNavigate();
  const [businessInfo, setBusinessInfo] = useState(null);

  useEffect(() => {
    sessionStorage.setItem(
      "monthlyContentPlan",
      JSON.stringify(monthlyContentPlan)
    );
  }, [monthlyContentPlan]);

  useEffect(() => {
    const storedBusinessInfo = localStorage.getItem("businessInfo");
    if (storedBusinessInfo) {
      try {
        const parsedInfo = JSON.parse(storedBusinessInfo);
        setBusinessInfo(parsedInfo);
      } catch (error) {
        console.error("Error parsing businessInfo from localStorage:", error);
      }
    }
  }, []);

  const saveContentToDB = async (posts) => {
    try {
      const user = JSON.parse(localStorage.getItem("user"));
      const token = localStorage.getItem("token");

      if (!user || !token) {
        console.error("User not authenticated");
        return;
      }

      const response = await fetch("http://localhost:5000/api/content-plans", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({ posts }),
      });

      if (!response.ok) {
        throw new Error("Failed to save content plans");
      }

      const result = await response.json();
      console.log("Content plans saved:", result);
    } catch (error) {
      console.error("Error saving content plans:", error);
    }
  };

  const fetchMonthContent = async (date) => {
    try {
      const businessInfo = JSON.parse(localStorage.getItem("businessInfo"));
      const response = await fetch("http://127.0.0.1:5000/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          prompt: `Generate content for ${date.toLocaleString("default", {
            month: "long",
          })} ${date.getFullYear()}`,
          // ... (keep other body parameters the same)
        }),
      });

      if (!response.ok) throw new Error("Failed to fetch month content");

      const data = await response.json();
      if (data.posts && Array.isArray(data.posts)) {
        const updatedContent = {};

        data.posts.forEach((post) => {
          const postDate = new Date(post.date.replace(" ", "T"));
          const monthKey = `${postDate.getFullYear()}-${String(
            postDate.getMonth() + 1
          ).padStart(2, "0")}`;

          if (!updatedContent[monthKey]) {
            updatedContent[monthKey] = [];
          }
          updatedContent[monthKey].push(post);
        });

        setMonthlyContentPlan((prev) => ({
          ...prev,
          ...updatedContent,
        }));
      }
    } catch (error) {
      console.error("Error fetching month content:", error);
    }
  };

  const previousMonth = () => {
    const newDate = new Date(
      currentMonth.getFullYear(),
      currentMonth.getMonth() - 1
    );
    setCurrentMonth(newDate);
  };

  const nextMonth = () => {
    const newDate = new Date(
      currentMonth.getFullYear(),
      currentMonth.getMonth() + 1
    );
    setCurrentMonth(newDate);
  };

  const days = [
    "SUNDAY",
    "MONDAY",
    "TUESDAY",
    "WEDNESDAY",
    "THURSDAY",
    "FRIDAY",
    "SATURDAY",
  ];

  const chunk = (arr, size) => {
    const chunked = [];
    for (let i = 0; i < arr.length; i += size) {
      chunked.push(arr.slice(i, i + size));
    }
    return chunked;
  };

  useEffect(() => {
    generateCalendarDays();
  }, [currentMonth]);

  const generateCalendarDays = () => {
    const year = currentMonth.getFullYear();
    const month = currentMonth.getMonth();

    const firstDay = new Date(year, month, 1);
    const lastDay = new Date(year, month + 1, 0);

    const daysBeforeMonth = firstDay.getDay(); // Days to fill before month starts
    const totalDays = lastDay.getDate(); // Total days in current month

    let days = [];

    // Fill days before current month
    for (let i = 0; i < daysBeforeMonth; i++) {
      days.push({ date: null, isCurrentMonth: false });
    }

    // Fill days of the current month
    for (let i = 1; i <= totalDays; i++) {
      days.push({
        date: i,
        isCurrentMonth: true,
        fullDate: new Date(year, month, i),
      });
    }

    // Fill extra days to complete the last week
    const totalCells = Math.ceil(days.length / 7) * 7;
    while (days.length < totalCells) {
      days.push({ date: null, isCurrentMonth: false });
    }

    setCalendarDays(days);
  };

  const Sidebar = () => (
    <div className="bg-fuchsia-400 w-20 md:w-32 flex flex-col space-y-6 p-4 h-screen fixed left-0 shadow-lg">
      <button
        onClick={() => navigate(-1)}
        className="text-black hover:bg-fuchsia-300 rounded p-2 transition-colors duration-200"
      >
        <span className="text-xl">‚Üê</span>
      </button>
      <div className="space-y-4 text-gray-800">
        {["Profile", "Notes"].map((item) => (
          <Link
            to={`/${item.toLowerCase()}`}
            key={item}
            className="block cursor-pointer hover:bg-fuchsia-300 p-2 rounded transition-all duration-200 transform hover:scale-105"
          >
            {item}
          </Link>
        ))}
      </div>
    </div>
  );

  const Header = () => {
    const monthNames = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ];

    return (
      <div className="flex justify-between items-center p-4 bg-sky-200">
        <div className="flex items-center">
          <h1 className="text-xl font-bold text-gray-800">Planlet*</h1>
          <div className="ml-4">
            <svg viewBox="0 0 100 100" className="w-12 h-12 animate-spin-slow">
              <circle
                cx="50"
                cy="50"
                r="40"
                fill="#98FB98"
                className="drop-shadow-md"
              />
              <circle cx="50" cy="50" r="15" fill="#FFD700" />
            </svg>
          </div>
        </div>

        <div className="flex items-center gap-4">
          <button
            onClick={previousMonth}
            className="px-4 py-2 bg-sky-300 hover:bg-sky-400 rounded-lg transition-colors duration-200 text-gray-700"
          >
            Previous Month
          </button>
          <div className="text-lg font-medium text-gray-700">
            {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}
          </div>
          <button
            onClick={nextMonth}
            className="px-4 py-2 bg-sky-300 hover:bg-sky-400 rounded-lg transition-colors duration-200 text-gray-700"
          >
            Next Month
          </button>
        </div>

        <div className="flex items-center space-x-2">
          <div className="bg-green-100 px-6 py-2 rounded-full shadow-sm hover:shadow-md transition-shadow duration-200">
            Hi! {JSON.parse(localStorage.getItem("user"))?.name || "Guest"}
          </div>
        </div>
      </div>
    );
  };

  const CalendarGrid = () => {
    const getContentForDate = (date) => {
      if (!date) return null;

      const monthKey = `${date.getFullYear()}-${String(
        date.getMonth() + 1
      ).padStart(2, "0")}`;

      const monthContent = monthlyContentPlan[monthKey];

      if (!monthContent) return null;

      return monthContent.find((item) => {
        const itemDate = new Date(item.date);
        return (
          itemDate.getDate() === date.getDate() &&
          itemDate.getMonth() === date.getMonth() &&
          itemDate.getFullYear() === date.getFullYear()
        );
      });
    };

    return (
      <div className="mx-4 bg-white rounded-2xl shadow-xl overflow-hidden border border-gray-100">
        <table className="w-full border-collapse">
          <thead>
            <tr>
              {days.map((day) => (
                <th
                  key={day}
                  className="p-4 text-left border-b border-gray-200 bg-white text-gray-600 font-medium"
                >
                  {day}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {chunk(calendarDays, 7).map((week, weekIndex) => (
              <tr key={weekIndex}>
                {week.map((day, dayIndex) => (
                  <td
                    key={`${weekIndex}-${dayIndex}`}
                    className={`border-r border-b border-gray-100 p-4 h-32 align-top cursor-pointer
                      ${!day.isCurrentMonth ? "bg-gray-50" : "hover:bg-sky-50"}
                      ${selectedDate === day.date ? "bg-sky-100" : ""}`}
                    onClick={() =>
                      day.isCurrentMonth && setSelectedDate(day.date)
                    }
                  >
                    {day.isCurrentMonth && (
                      <div className="h-full flex flex-col">
                        <div className="font-medium text-gray-700 mb-1">
                          {day.date}
                        </div>
                        {day.fullDate && (
                          <>
                            {getContentForDate(day.fullDate) && (
                              <div className="text-xs bg-blue-50 p-2 rounded-md overflow-y-auto max-h-24">
                                {getContentForDate(day.fullDate).content}
                              </div>
                            )}
                          </>
                        )}
                      </div>
                    )}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  };

  const PromptBox = () => {
    const [tempInput, setTempInput] = useState("");
    const [loading, setLoading] = useState(false);

    const handleSubmit = async () => {
      if (tempInput.trim() === "") return;
      setLoading(true);

      try {
        const businessInfo = JSON.parse(localStorage.getItem("businessInfo"));
        const response = await fetch("http://127.0.0.1:5000/submit", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            prompt: tempInput, // Use the user's input as the prompt
            businessType: businessInfo.businessType,
            targetAudience: businessInfo.targetAudience,
            goals: businessInfo.goals,
            postingDays: businessInfo.postingDays,
            specialEvents: businessInfo.specialEvents,
            contentFormats: "Mixed",
            geographicArea: "Global",
            targetMonth: currentMonth.toISOString(), // Include the target month
          }),
        });

        if (!response.ok) throw new Error("Failed to get response");
        const data = await response.json();

        if (data.posts && Array.isArray(data.posts)) {
          const updatedContent = {};

          data.posts.forEach((post) => {
            const postDate = new Date(post.date.replace(" ", "T"));
            const monthKey = `${postDate.getFullYear()}-${String(
              postDate.getMonth() + 1
            ).padStart(2, "0")}`;

            if (!updatedContent[monthKey]) {
              updatedContent[monthKey] = [];
            }
            updatedContent[monthKey].push(post);
          });

          setMonthlyContentPlan((prev) => ({
            ...prev,
            ...updatedContent,
          }));
        }

        setSummary(data.summary || "Content plan updated successfully!");
        setTempInput("");
        setPromptExpanded(false);
      } catch (error) {
        console.error("Error:", error);
        setSummary("Error processing your request.");
      } finally {
        setLoading(false);
      }
    };

    const handleKeyDown = (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        handleSubmit();
      }
    };

    return (
      <div
        className="fixed bottom-8 left-0 right-0 flex justify-center"
        style={{ marginLeft: "128px" }}
      >
        <div
          className={`relative bg-gray-800/90 backdrop-blur-sm w-[800px] text-white rounded-xl shadow-lg transition-all duration-300 ease-in-out ${
            promptExpanded ? "h-auto" : "h-24"
          }`}
        >
          {promptExpanded && (
            <button
              onClick={() => setPromptExpanded(false)}
              className="absolute top-2 right-2 text-gray-400 hover:text-white p-2"
            >
              ‚úï
            </button>
          )}
          <div
            className="p-6 cursor-pointer"
            onClick={() => !promptExpanded && setPromptExpanded(true)}
          >
            {!promptExpanded ? (
              <p className="text-lg text-gray-200">
                Click to expand and describe your plan. We'll create the perfect
                calendar for you.
              </p>
            ) : (
              <div className="space-y-4">
                {summary && (
                  <div className="bg-gray-700/50 p-4 rounded-lg mb-4 overflow-y-auto max-h-60">
                    <p className="whitespace-pre-wrap">{summary}</p>
                  </div>
                )}
                <textarea
                  className="w-full bg-gray-700/50 text-white rounded-lg p-4 outline-none resize-none"
                  placeholder="Describe your plan here..."
                  value={tempInput}
                  onChange={(e) => setTempInput(e.target.value)}
                  onKeyDown={handleKeyDown}
                  rows={3}
                  onClick={(e) => e.stopPropagation()}
                />
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    handleSubmit();
                  }}
                  className="bg-sky-500 hover:bg-sky-600 px-4 py-2 rounded-lg transition-colors duration-200"
                >
                  Generate Content
                </button>
                {loading && (
                  <div className="absolute bottom-4 right-4 text-sm text-gray-400">
                    Typing...
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  const style = document.createElement("style");
  style.textContent = `
    @keyframes spin-slow {
      from {
        transform: rotate(0deg);
      }
      to {
        transform: rotate(360deg);
      }
    }
    .animate-spin-slow {
      animation: spin-slow 20s linear infinite;
    }
  `;
  document.head.appendChild(style);

  return (
    <div className="min-h-screen bg-gradient-to-br from-sky-200 to-sky-300">
      <Sidebar />
      <div className="ml-20 md:ml-32">
        <Header />
        <main className="pt-4 pb-32">
          <CalendarGrid />
        </main>
        <PromptBox />
      </div>
    </div>
  );
};

export default CalendarLayout;
